<?php

namespace App;

require_once __DIR__ . '/../vendor/autoload.php'; //ensure this is still included, as it will not be included by index.php when using namespaces.


use Dotenv\Dotenv;
use Exception;
use Google_Client;
use Google_Service_Drive;

/* The `GoogleDriveService` class is a PHP class that provides functionality to interact with Google
Drive API */

class GoogleDriveService {
	private Google_Client $client;
	private Google_Service_Drive $service;

	private CacheService $cacheService;
	private string $currentFolderId;


	public function __construct( $credentialsFile, CacheService $cacheService, string $folderId = null ) {

		if ( $folderId === null ) {
			$folderId = get_option( 'wp_gdrive_default_folder_id', '' );
		}

		$appName = get_option( 'wp_gdrive_app_name', 'WordPress Google Drive' );

		$this->client = new Google_Client();
		$this->client->setApplicationName( $appName );
		$this->client->setScopes( Google_Service_Drive::DRIVE_READONLY );
		$this->client->setAuthConfig( $credentialsFile );

		$serviceAccount = get_option( 'wp_gdrive_service_account', '' );

		if ( $serviceAccount ) {
			$this->client->setSubject( $serviceAccount );
		}

		$this->service         = new Google_Service_Drive( $this->client );
		$this->currentFolderId = $folderId;
		$this->cacheService    = $cacheService;
	}

	public function getFolderContents( int $pageSize = 50 ): array {

		$cacheKey = md5( $this->currentFolderId );


		$files = $this->cacheService->get( $cacheKey );

		if ( $files === null ) {
			$results = $this->service->files->listFiles( [
				'q'        => "'$this->currentFolderId' in parents and trashed = false",
				'fields'   => 'nextPageToken, files(id, name, mimeType, webViewLink)',
				'pageSize' => $pageSize
			] );
			$files   = $results->getFiles();
			$this->cacheService->store( $cacheKey, $files );
		}

		return $files;
	}


	/**
	 * This PHP function retrieves breadcrumbs for a given folder ID, caching the result for future
	 * use.
	 *
	 * @return array The `getBreadcrumbs` function returns an array of breadcrumbs for the current
	 * folder. The breadcrumbs are retrieved from a cache using the current folder ID as a cache key.
	 * If the breadcrumbs are not found in the cache, they are generated by iterating through the
	 * parent folders of the current folder and storing the folder ID and name in the breadcrumbs
	 * array. Finally, the generated breadcrumbs are stored in the cache before
	 */
	public function getBreadcrumbs(): array {
		$cacheKey        = md5( $this->currentFolderId . '-crumbs' );
		$currentFolderId = $this->currentFolderId;
		$breadcrumbs     = $this->cacheService->get( $cacheKey );
		if ( $breadcrumbs === null ) {
			$breadcrumbs = [];
			while ( $currentFolderId && $currentFolderId !== 'root' ) {
				$folder = $this->service->files->get( $currentFolderId, [ 'fields' => 'id, name, parents' ] );
				array_unshift( $breadcrumbs, [
					'id'   => $folder->getId(),
					'name' => $folder->getName()
				] );
				$currentFolderId = $folder->getParents()[0] ?? null;
			}
			$this->cacheService->store( $cacheKey, $breadcrumbs );
		}

		return $breadcrumbs;
	}


	/**
	 * The function `changeFolder` sets the current folder ID to the provided folder ID in PHP.
	 *
	 * @param string folderId The `changeFolder` function takes a parameter `folderId` of type string.
	 * This function sets the `currentFolderId` property of the class to the value of the `folderId`
	 * parameter.
	 */
	public function changeFolder( string $folderId ): void {
		$this->currentFolderId = $folderId;
	}
}